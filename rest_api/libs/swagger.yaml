openapi: 3.0.0

info:
  title: Nimble test api
  description: Accepts data in JSON decoding it in binary format and store in postgres database.
  version: 0.0.1
tags:
  - name: bin data
paths:
  /api/bin/:
    get:
      tags:
        - bin data
      summary: Returns all stored data
      description: Returns
      responses:
        '200':
          description: A JSON array of stored data
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuids:
                    type: array
                    items:
                      properties:
                        uuid:
                          type: string
                        value:
                          type: string
                        timestamp:
                          type: string
                      example:
                        - uuid: bba53464-a643-4872-add2-a10a336bbc92
                          value: some value decoded from binary format
                          timestamp: 1673425999.603392
                        - uuid: a768169a-3191-4040-98db-b300160c0947
                          value: decoded value
                          timestamp: 1673421088.902057
                        - uuid: c50d1c8c-c3b7-4f01-9cb2-48db137e963a
                          value: value
                          timestamp: 1673423215.123504
                  status:
                    type: string
                    example: 200
  /api/bin/{uuid}:
    get:
      tags:
        - bin data
      summary: Returns decoded data by uuid key.
      description: Optional extended description in CommonMark or HTML.
      parameters:
        - name: uuid
          in: path
          description: The uuid of the data-key
          required: true
          schema:
            type: string
            format: uuid4
      responses:
        '200': # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: string
                    example: some value decoded from binary format
                  timestamp:
                    type: string
                    example: 1673425999.603392
                  status:
                    type: string
                    example: 200

        '400': # status code
          description: A JSON array with error description and status code
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: given uuid-key is not in uuid format
                  status:
                    type: string
                    example: 400
        '404': # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: no uuid-key was found
                  status:
                    type: string
                    example: 404

    put:
      tags:
        - bin data
      summary: Accepts data and store it in binary format
      description: Optional extended description in CommonMark or HTML.
      parameters:
        - name: uuid
          in: path
          description: The uuid of the data-key
          required: true
          schema:
            type: string
            format: uuid4
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
                  example: some value to be encoded
      responses:
        '200': # status code
          description: Updating existing record in db
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: string
                    example: some value which was updated
                  timestamp:
                    type: string
                    example: 1673425999.603392
                  status:
                    type: string
                    example: 200
        '201': # status code
          description: Creating record in db from json data and returns response with data and status code
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: string
                    example: some value which was encoded to binary format
                  timestamp:
                    type: string
                    example: 1673425999.603392
                  status:
                    type: string
                    example: 201
        '400': # status code
          description: A response with error message and status code. Returns one value from given example.

          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: no uuid-key was found OR given uuid-key is not in uuid format
                    description: returns one of given in example values
                  status:
                    type: string
                    example: 400
        '404': # status code
          description: A response with error message and status code
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuid:
                    type: object
                    properties:
                      error:
                        type: string
                        example: no uuid-key was found
                      status:
                        type: string
                        example: 404
